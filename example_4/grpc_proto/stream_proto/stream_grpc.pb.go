// 指定proto版本

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: stream.proto

// 指定默认包名

package stream_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ServiceStream_DownloadFile_FullMethodName = "/stream_proto.ServiceStream/DownloadFile"
)

// ServiceStreamClient is the client API for ServiceStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceStreamClient interface {
	// 下载文件，关键字stream
	DownloadFile(ctx context.Context, in *Request, opts ...grpc.CallOption) (ServiceStream_DownloadFileClient, error)
}

type serviceStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceStreamClient(cc grpc.ClientConnInterface) ServiceStreamClient {
	return &serviceStreamClient{cc}
}

func (c *serviceStreamClient) DownloadFile(ctx context.Context, in *Request, opts ...grpc.CallOption) (ServiceStream_DownloadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServiceStream_ServiceDesc.Streams[0], ServiceStream_DownloadFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceStreamDownloadFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServiceStream_DownloadFileClient interface {
	Recv() (*FileResponse, error)
	grpc.ClientStream
}

type serviceStreamDownloadFileClient struct {
	grpc.ClientStream
}

func (x *serviceStreamDownloadFileClient) Recv() (*FileResponse, error) {
	m := new(FileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceStreamServer is the server API for ServiceStream service.
// All implementations must embed UnimplementedServiceStreamServer
// for forward compatibility
type ServiceStreamServer interface {
	// 下载文件，关键字stream
	DownloadFile(*Request, ServiceStream_DownloadFileServer) error
	mustEmbedUnimplementedServiceStreamServer()
}

// UnimplementedServiceStreamServer must be embedded to have forward compatible implementations.
type UnimplementedServiceStreamServer struct {
}

func (UnimplementedServiceStreamServer) DownloadFile(*Request, ServiceStream_DownloadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedServiceStreamServer) mustEmbedUnimplementedServiceStreamServer() {}

// UnsafeServiceStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceStreamServer will
// result in compilation errors.
type UnsafeServiceStreamServer interface {
	mustEmbedUnimplementedServiceStreamServer()
}

func RegisterServiceStreamServer(s grpc.ServiceRegistrar, srv ServiceStreamServer) {
	s.RegisterService(&ServiceStream_ServiceDesc, srv)
}

func _ServiceStream_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceStreamServer).DownloadFile(m, &serviceStreamDownloadFileServer{stream})
}

type ServiceStream_DownloadFileServer interface {
	Send(*FileResponse) error
	grpc.ServerStream
}

type serviceStreamDownloadFileServer struct {
	grpc.ServerStream
}

func (x *serviceStreamDownloadFileServer) Send(m *FileResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ServiceStream_ServiceDesc is the grpc.ServiceDesc for ServiceStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stream_proto.ServiceStream",
	HandlerType: (*ServiceStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DownloadFile",
			Handler:       _ServiceStream_DownloadFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "stream.proto",
}
